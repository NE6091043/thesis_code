/*******************************************************************************
 * Copyright (c) 2013-2015 LAAS-CNRS (www.laas.fr) 
 * 7 Colonel Roche 31077 Toulouse - France
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Thierry Monteil (Project co-founder) - Management and initial specification, 
 * 		conception and documentation.
 *     Mahdi Ben Alaya (Project co-founder) - Management and initial specification, 
 * 		conception, implementation, test and documentation.
 *     Christophe Chassot - Management and initial specification.
 *     Khalil Drira - Management and initial specification.
 *     Yassine Banouar - Initial specification, conception, implementation, test 
 * 		and documentation.
 *     Guillaume Garzone - Conception, implementation, test and documentation.
 *     Francois Aissaoui - Conception, implementation, test and documentation.
 ******************************************************************************/
package org.eclipse.om2m.core.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

import javax.persistence.EntityManager;

import org.apache.commons.codec.binary.Base64;
import org.eclipse.om2m.commons.resource.Application;
import org.eclipse.om2m.commons.rest.RequestIndication;
import org.eclipse.om2m.commons.rest.ResponseConfirm;
import org.eclipse.om2m.core.comm.RestClient;
import org.eclipse.om2m.core.dao.DAOFactory;
import org.eclipse.om2m.core.dao.DBAccess;
import org.eclipse.om2m.core.notifier.handle_http;

/** allows the choice of the controller based on the aPoC of the application**/
public class APocController extends Controller{
	
	
	public static boolean flag=false;
	
//	public static double efficiency=0.5;
	
	public static double eff1=0.8, eff2=0.8;
	
	public static long time=50;
	
	public static String idx="1";
	
	
	public static String gettime() {
		String cmd="sh /home/user/time.sh";
		Runtime run = Runtime.getRuntime();
		Process pr = null;
		try {
			pr = run.exec(cmd);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			pr.waitFor();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		BufferedReader buf = new BufferedReader(new InputStreamReader(pr.getInputStream()));
		String line = "";
		try {
			line+=buf.readLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return line;
	}
	
//	public void caltime(RequestIndication requestIndication) {
//		String[] tmp0=requestIndication.getRepresentation().split("<str name='timestamp' val='");
////		String google_time=getgoogletime();
////		String newcontent=tmp0[0]+"<str name='timestamp' val='"+google_time+"'/></obj>";
////		requestIndication.setRepresentation(newcontent);
//		
//		long nsclTime=Long.parseLong(tmp0[1].split("'/></obj>")[0]);
//		//set time into it
//		long diff=Long.parseLong(gettime())-nsclTime;
//		String newcontent=tmp0[0]+"<str name='timestamp' val='"+diff+"'/></obj>";	
//		requestIndication.setRepresentation(newcontent);
//	}
	
	
	public void efficiency(RequestIndication requestIndication){
		String[] tmp0=requestIndication.getRepresentation().split("<str name='efficiency' val='");
		
		String representation = requestIndication.getRepresentation();
		long datasize=representation.length();
		
		
		String[] tmp3=requestIndication.getRepresentation().split("<str name='coredelay' val='");
//		long gsclTime=Long.parseLong(tmp3[1].split("'/></obj>")[0]);
		time=Long.parseLong(gettime())-Long.parseLong(tmp3[1].split("'/><str name='efficiency'")[0]);
		
		
		String[] tmp4=requestIndication.getRepresentation().split("<str name='index' val='");

		idx=tmp4[1].split("'/><str name='timestamp'")[0];

//		double efficiency;
		
		eff1=eff2;

//		if(handle_http.total_throughput==0.0){
//			eff2=0.79124122;
//		}else{
//			eff2=(double)datasize/handle_http.total_throughput;
//		}
//		
//		eff2=(double)datasize/handle_http.total_throughput;
//		
//		
//		if(eff1>1) {
//
//			eff1=0.2;
//
//		}
//		
//		if(time>1000) {
//			eff1=0.0;
//		}

		
		handle_http.total_throughput=0;		
		
		String newcontent=tmp0[0]+"<str name='efficiency' val='"+eff1+"'/></obj>";
		flag=true;
		requestIndication.setRepresentation(newcontent);
	}

    public ResponseConfirm doCreate (RequestIndication requestIndication) {

        String sclId = requestIndication.getTargetID().split("/")[0];
        String applicationId = requestIndication.getTargetID().split("/")[2];
        String applicationUri = sclId+"/applications/"+applicationId;
        EntityManager em = DBAccess.createEntityManager();
        em.getTransaction().begin();
        Application application= DAOFactory.getApplicationDAO().find(applicationUri, em);
        em.close();
        String aPoCPath = application.getAPoCPaths().getAPoCPath().get(0).getPath();
        if (aPoCPath.matches(".*://.*")){
        	
//        	caltime(requestIndication);
            String targetID = requestIndication.getTargetID().split(applicationId)[1];
            requestIndication.setBase(aPoCPath);
            requestIndication.setTargetID(targetID);
            efficiency(requestIndication);
            return new RestClient().sendRequest(requestIndication);
        }else{
            InterworkingProxyController IPUController= new InterworkingProxyController();
            return IPUController.doCreate(requestIndication);
        }
    }

    public ResponseConfirm doRetrieve (RequestIndication requestIndication) {


        String sclId = requestIndication.getTargetID().split("/")[0];
        String applicationId = requestIndication.getTargetID().split("/")[2];
        String applicationUri = sclId+"/applications/"+applicationId;

        EntityManager em = DBAccess.createEntityManager();
        em.getTransaction().begin();
        Application application= DAOFactory.getApplicationDAO().find(applicationUri, em);
        em.close();
        String aPoCPath = application.getAPoCPaths().getAPoCPath().get(0).getPath();
        if (aPoCPath.matches(".*://.*")){
            String targetID = requestIndication.getTargetID().split(applicationId)[1];
            requestIndication.setBase(aPoCPath);
            requestIndication.setTargetID(targetID);
            LOGGER.info(targetID);
            return new RestClient().sendRequest(requestIndication);
        }else{
            Controller IPUController= new InterworkingProxyController();
            return IPUController.doRetrieve(requestIndication);
        }
    }
    
    
    public ResponseConfirm doUpdate (RequestIndication requestIndication) {

        String sclId = requestIndication.getTargetID().split("/")[0];
        String applicationId = requestIndication.getTargetID().split("/")[2];
        String applicationUri = sclId+"/applications/"+applicationId;
        EntityManager em = DBAccess.createEntityManager();
        em.getTransaction().begin();
        Application application= DAOFactory.getApplicationDAO().find(applicationUri, em);
        em.close();
        String aPoCPath = application.getAPoCPaths().getAPoCPath().get(0).getPath();
        if (aPoCPath.matches(".*://.*")){
            String targetID = requestIndication.getTargetID().split(applicationId)[1];
            requestIndication.setBase(aPoCPath);
            requestIndication.setTargetID(targetID);
            return new RestClient().sendRequest(requestIndication);
        }else{
            Controller IPUController= new InterworkingProxyController();
            return IPUController.doUpdate(requestIndication);
        }
    }



    public ResponseConfirm doDelete (RequestIndication requestIndication) {
        String sclId = requestIndication.getTargetID().split("/")[0];
        String applicationId = requestIndication.getTargetID().split("/")[2];
        String applicationUri = sclId+"/applications/"+applicationId;
        EntityManager em = DBAccess.createEntityManager();
        em.getTransaction().begin();
        Application application= DAOFactory.getApplicationDAO().find(applicationUri, em);
        em.close();
        String aPoCPath = application.getAPoCPaths().getAPoCPath().get(0).getPath();
        if (aPoCPath.matches(".*://.*")){
            String targetID = requestIndication.getTargetID().split(applicationId)[1];
            requestIndication.setBase(aPoCPath);
            requestIndication.setTargetID(targetID);
            return new RestClient().sendRequest(requestIndication);
        }else{
            Controller IPUController= new InterworkingProxyController();
            return IPUController.doDelete(requestIndication);
        }
    }

    public ResponseConfirm doExecute (RequestIndication requestIndication) {

        String sclId = requestIndication.getTargetID().split("/")[0];
        String applicationId = requestIndication.getTargetID().split("/")[2];
        String applicationUri = sclId+"/applications/"+applicationId;
        EntityManager em = DBAccess.createEntityManager();
        em.getTransaction().begin();
        Application application= DAOFactory.getApplicationDAO().find(applicationUri, em);
        em.close();
        String aPoCPath = application.getAPoCPaths().getAPoCPath().get(0).getPath();
        if (aPoCPath.matches(".*://.*")){
            String targetID = requestIndication.getTargetID().split(applicationId)[1];
            requestIndication.setBase(aPoCPath);
            requestIndication.setTargetID(targetID);
            return new RestClient().sendRequest(requestIndication);
        }else{
            Controller IPUController= new InterworkingProxyController();
            return IPUController.doExecute(requestIndication);
        }

    }

}
